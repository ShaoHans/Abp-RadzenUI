@using Volo.Abp.UI.Navigation
@inject MenuService MenuService
@inject IMenuManager MenuManager

<RadzenSidebar @bind-Expanded="@SidebarExpanded" class="demos-sidebar" style="display: flex; flex-direction: column">
    @* <div style="padding: 1rem">
        <RadzenTextBox id="find" Placeholder="Find menu ..." type="search" @oninput="@FilterPanelMenu" style="width: 100%" class="rz-search-input" aria-label="find" />
    </div> *@
    <div style="flex: 1; overflow: auto">
        <RadzenPanelMenu Match="NavLinkMatch.Prefix">
            @* @foreach (var first in menus)
            {
                <NavigationItem @key=first @bind-Expanded=@first.Expanded Menu=@first>
                    @if (first.Children != null)
                    {
                        @foreach (var second in first.Children)
                        {
                            if (second.Children != null)
                            {
                                <NavigationItem @key=second @bind-Expanded=@second.Expanded Menu=@second>
                                    @foreach (var third in second.Children)
                                    {
                                        <NavigationItem @key=third @bind-Expanded=@third.Expanded Menu=@third />
                                    }
                                </NavigationItem>
                            }
                            else
                            {
                                <NavigationItem @key=second @bind-Expanded=@second.Expanded Menu=@second />
                            }
                        }
                    }
                </NavigationItem>
            } *@
            @foreach (var menu in _applicationMenu?.Items ?? [])
            {
                @BuildMenuTree(menu);
            }
        </RadzenPanelMenu>
    </div>
</RadzenSidebar>

@code {
    IEnumerable<Menu> menus = [];
    [Parameter]
    public bool SidebarExpanded { get; set; }

    [Parameter]
    public EventCallback<bool> SidebarExpandedChanged { get; set; }

    ApplicationMenu _applicationMenu = default!;

    protected override async Task OnInitializedAsync()
    {
        //menus = MenuService.Menus;

        _applicationMenu = await MenuManager.GetMainMenuAsync();
    }

    void FilterPanelMenu(ChangeEventArgs args)
    {
        var term = args.Value?.ToString();

        menus = string.IsNullOrEmpty(term) ? MenuService.Menus : MenuService.Filter(term);
    }

    RenderFragment BuildMenuTree(ApplicationMenuItem menuItem) => __builder =>
    {
        <RadzenPanelMenuItem Icon="@menuItem.Icon" Text="@menuItem.DisplayName" Path="@menuItem.Url">
            <ChildContent>
                @foreach (var child in menuItem.Items ?? [])
                {
                    @BuildMenuTree(child);
                }
            </ChildContent>
        </RadzenPanelMenuItem>
    };
}
